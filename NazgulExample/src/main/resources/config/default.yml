#This is the application default configuration. the input file or OneRing will override this.
# Attention!!! DO NOT EDIT THIS FILE MANUALLY

#========== Project Configuration ==========#
project:
  rootPackage: cyan.svc.nazgulexample
  fileStorage: /data

#========== Component Configuration ==========#
nazComponents:
  # API
  SwaggerComponent: true
  # Web
  WebComponent: true
  FreemarkerComponent: true
  MultipartyComponent: true
  ErrorPageComponent: true
  WebSocketComponent: false
  # DB
  MyBatisComponent: true
  MultipleDataSourceComponent: true
  DbHealthComponent: true
  EntityManagerComponent: true
  RestEntityComponent: true
  FlywayComponent: true
  SpringContextComponent: false
  # Manager
  MngrComponent: false
  # Schedule
  JobComponent: true
  # Auth
  JwtComponent: true
  SuperAdminComponent: true
  ShiroComponent: false

#========== Super Admin ==========#
superadmin:
  username: admin
  passwd: 123456

#========== Cross Doamin ==========#
crossdomain:
  enable: true
  accessControlAllowOrigin: '*'
  accessControlAllowHeaders: origin, content-type, accept, authorization, accesstoken
  accessControlAllowCredentials: true
  accessControlAllowMethods: GET, POST, PUT, DELETE, OPTIONS, HEAD
  accessControlMaxAge: Access-Control-Max-Age

#========== Authentication ==========#
authenticationCachePolicy: maximumSize=10000,expireAfterAccess=10m

#========== FreeMarker ==========#
#views:
#  .ftl:
#    strict_syntax: yes

#========== DefaultServerFactory ==========#
server:
  type: default
  maxThreads: 1024
  registerDefaultExceptionMappers: false
  applicationConnectors:
    - type: http
      port: 8080
  adminConnectors:
    - type: http
      port: 28080
#  requestLog:
#    appenders:
#      - type: console
#        filterFactories:
#          - type: api-filter-factory

#========== DefaultServerFactory ==========#
swagger:
  resourcePackage: auto filled project.resourcePackage
  schemes:
    - http
    - https
  securityDefinitions:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
    JWT:
      description: "Bearer {access_token}"
      type: apiKey
      name: Authorization
      in: header

#========== Auth JWT ==========#
auth:
  jwtTokenSecret: "e72a9e79b45927f9de9b7b4e819f787bcf46f197342b48564ebdc3e7046d9c94"
  jwtRealm: "JWT"
  jwtPreFix: "Bearer"

#========== Shiro ==========#
#See https://github.com/silb/shiro-jersey#configure-shiro
shiro:
  iniConfigs: ["classpath:config/shiro.ini"]

#========== DbConfiguration ==========#
database:
  # The following config will be set on
  # url: jdbc:mysql://hamohome.com:13306/dropwizard
  # user: dropwizard
  # password: 123456
  driverClass: com.mysql.cj.jdbc.Driver
  properties:
    charSet: UTF-8
  # the maximum amount of time to wait on an empty pool before throwing an exception
  maxWaitForConnection: 1s
  # the SQL query to run when validating a connection's liveness
  validationQuery: "/* MyService Health Check */ SELECT 1"
  # the timeout before a connection validation queries fail
  validationQueryTimeout: 3s
  # the minimum number of connections to keep open
  minSize: 8
  # the maximum number of connections to keep open
  maxSize: 32
  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false
  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s
  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute

flyway:
  # The encoding of SQL migrations. (default: UTF-8)
  encoding: UTF-8
  # The schemas managed by Flyway. (default: default schema of the connection)
  # schemas:
  # The fully qualified class names of the callbacks for lifecycle notifications. (default: empty list)
  # callbacks:
  # The name of the schema metadata table that will be used by Flyway. (default: schema_version)
  metaDataTableName: schema_version
  # The file name prefix for sql migrations (default: V)
  sqlMigrationPrefix: V
  # The file name separator for sql migrations (default: __)
  sqlMigrationSeparator: __
  # The file name suffix for sql migrations (default: .sql)
  sqlMigrationSuffix: .sql
  # The prefix of every placeholder. (default: ${ )
  # placeholderPrefix: ${
  # The suffix of every placeholder. (default: } )
  # placeholderSuffix: }
  # The map of <placeholder, replacementValue> to apply to sql migration scripts. (default: empty map)
  # placeholders:
  # Locations to scan recursively for migrations. (default: db/migration)
  locations:
  - flyway/mysql
  # The fully qualified class names of the custom MigrationResolvers to be used in addition to the built-in ones for resolving Migrations to apply. (default: empty list)
  # resolvers:
  # Allows migrations to be run "out of order". If you already have versions 1 and 3 applied, and now a version 2 is found, it will be applied too instead of being ignored. (default: false)
  outOfOrder: false
  # The description to tag an existing schema with when executing baseline. (default: << Flyway Baseline >>)
  baselineDescription: "<< Flyway Baseline >>"
  # Whether to automatically call baseline when migrate is executed against a non-empty schema with no metadata table. (default: false)
  # Be careful when enabling this as it removes the safety net that ensures Flyway does not migrate the wrong database in case of a configuration mistake!
  baselineOnMigrate: false
  # Whether to automatically call validate or not when running migrate. (default: true)
  validateOnMigrate: true

#========== Logging ==========
logging:
  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO,
  # DEBUG, TRACE, or ALL.
  level: DEBUG

  loggers:
    io.dropwizard: INFO
    #Jetty
    org.eclipse.jetty: INFO
    #Xdiamond
    io.github.xdiamond: INFO
    #Swagger
    io.swagger: INFO
    #Reflection
    org.reflections: INFO
    #JDBC
    jdbc.sqltiming: DEBUG
    java.sql.Connection: DEBUG
    java.sql.Statement: DEBUG
    java.sql.PreparedStatement: DEBUG
    java.sql.ResultSet: DEBUG
    #MyBatis
    org.apache.ibatis: INFO
    org.apache.ibatis.common.jdbc.SimpleDataSource: DEBUG
    org.apache.ibatis.common.jdbc.ScriptRunner: DEBUG
    org.apache.ibatis.sqlmap.engine.impl.SqlMapClientDelegate: DEBUG
    #Hibernate
    org.hibernate: WARN
    #QuertDsl
    com.querydsl: INFO
    #FreeMarker
    freemarker: INFO
    #Jobs
    de.spinscale.dropwizard.jobs: WARN
    org.quartz.core: WARN
    #Shiro
    org.apache.shiro: INFO
    #Netty
    io.netty: INFO
    #RSQL
    com.github.tennaito.rsql: DEBUG
    #Commons
    org.apache.commons: INFO
    #Logger Filter
    cyan.nazgul.dropwizard: INFO
    # Utils
    cyan.util.clazz.ClassUtil: INFO
    #==== Application =====
    cyan.svc.nazgulexample: INFO
    cyan.svc.nazgulexample.mappers: DEBUG

  appenders:
    - type: console
      #threshold: WARN
      #target: stderr

#    - type: file
#      # The file to which current statements will be logged.
#      currentLogFilename: ./logs/example.log
#      # When the log file rotates, the archived log will be renamed to this and gzipped. The
#      # %d is replaced with the previous day (yyyy-MM-dd). Custom rolling windows can be created
#      # by passing a SimpleDateFormat-compatible format as an argument: "%d{yyyy-MM-dd-hh}".
#      archivedLogFilenamePattern: ./logs/example-%d.log.gz
#      # The number of archived files to keep.
#      archivedFileCount: 5
#      # The timezone used to format dates. HINT: USE THE DEFAULT, UTC.
#      timeZone: UTC

#    - type: syslog
#      # The hostname of the syslog server to which statements will be sent.
#      # N.B.: If this is the local host, the local syslog instance will need to be configured to
#      # listen on an inet socket, not just a Unix socket.
#      host: localhost
#      # The syslog facility to which statements will be sent.
#      facility: local0
